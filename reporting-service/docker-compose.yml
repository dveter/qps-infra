version: "3.7"
networks:
  default:
    external:
      name: infra
services:
  zebrunner-proxy:
    image: "nginx:${TAG_NGINX}"
    container_name: zebrunner-proxy
    volumes:
    - "./configuration/zebrunner-proxy/nginx.conf:/etc/nginx/nginx.conf:ro"
    ports:
#    - "80:80"     # primary HTTP port
    - "5672:5672" # log collection port
#    - "8081:8081" # RabbitMQ administration, optional
    - "5432:5432" # database administration, optional
#    - "6379:6379" # Redis administration, optional
    depends_on:
      - reporting-ui
      - reporting-service
    restart: always
  postgres:
    image: "qaprosoft/postgres:${TAG_POSTGRES}"
    container_name: postgres
    volumes:
      - "pgdata-volume:/var/lib/postgresql/data"
      - "./database/:/docker-entrypoint-initdb.d"
    environment:
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
    restart: always
  rabbitmq:
    image: "qaprosoft/rabbitmq:${TAG_RABBITMQ}"
    container_name: rabbitmq
    volumes:
      - "./configuration/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro"
    environment:
      - RABBITMQ_DEFAULT_USER=qpsdemo
      - RABBITMQ_DEFAULT_PASS=qpsdemo
    restart: always
  redis:
    image: "redis:${TAG_REDIS}"
    container_name: redis
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
      - "./configuration/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro"
    restart: always
  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:${TAG_ELASTICSEARCH}"
    container_name: elasticsearch
    volumes:
      - "esdata-volume:/usr/share/elasticsearch/data"
      - "./configuration/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro"
    environment:
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    restart: always
  logstash:
    image: "docker.elastic.co/logstash/logstash:${TAG_LOGSTASH}"
    container_name: logstash
    volumes:
      - "./configuration/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
      - "./configuration/logstash/mapping.json:/mapping.json:ro"
    depends_on:
      - elasticsearch
    restart: always
  reporting-service:
    image: "zebrunner/reporting-service:${TAG_REPORTING_SERVICE}"
    container_name: reporting-service
    volumes:
      - "assets-data:/opt/assets"
    env_file:
      - variables.env
    environment:
      - "DATABASE_USERNAME=${POSTGRES_USER}"
      - "DATABASE_PASSWORD=${POSTGRES_PASSWORD}"
      - "WEB_HOST=http://${INFRA_HOST}"
      - "API_HOST=http://${INFRA_HOST}"
      - "ELASTICSEARCH_URL=http://${INFRA_HOST}/elasticsearch"
      - "GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}"
      - "GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}"
      - "AUTH_TOKEN_SECRET=${AUTH_TOKEN_SECRET}"
      - "CRYPTO_SALT=${CRYPTO_SALT}"
    depends_on:
      - postgres
      - rabbitmq
      - redis
    restart: always
  reporting-ui:
    image: "zebrunner/reporting-ui:${TAG_REPORTING_UI}"
    container_name: reporting-ui
    environment:
#TODO: declare INFRA_HOST in .env of zebrunner/zebrunner
# https://github.com/zebrunner/zebrunner/issues/2127
      - ZAFIRA_API_HOST=http://${INFRA_HOST}
# TODO: investigate why we still have a lot of calls to zafira-ws
#      - ZAFIRA_API_CONTEXT_PATH=reporting-service
    depends_on:
      - reporting-service
    restart: always
volumes:
  pgdata-volume:
  esdata-volume:
  assets-data:
