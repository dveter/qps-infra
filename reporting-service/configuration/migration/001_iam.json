{
  "inputDataSource": {
    "driverClassName": "org.postgresql.Driver",
    "url": "jdbc:postgresql://postgres:5432/postgres",
    "username": "postgres",
    "password": "changeit"
  },
  "outputDataSource": {
    "driverClassName": "org.postgresql.Driver",
    "url": "jdbc:postgresql://iam-db:5432/postgres",
    "username": "postgres",
    "password": "changeit"
  },
  "readiness": {
    "probes": {
      "dataSource": 30,
      "tables": 600,
      "execution": 600
    },
    "expectedTables": [
      "USERS",
      "GROUPS",
      "PERMISSIONS",
      "GROUP_PERMISSIONS",
      "USER_GROUPS",
      "INVITATIONS",
      "LDAP_CONFIGURATION"
    ]
  },
  "scenarios": [
    {
      "selectQuery": "SELECT ID, USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, COVER_PHOTO_URL AS PHOTO_URL, LAST_LOGIN, SOURCE, STATUS, RESET_TOKEN, CREATED_AT FROM USERS; ",
      "insertQuery": "INSERT INTO USERS(ID, USERNAME, PASSWORD, EMAIL, FIRST_NAME, LAST_NAME, PHOTO_URL, LAST_LOGIN, SOURCE, STATUS, RESET_TOKEN, CREATED_AT) VALUES (:ID, :USERNAME, :PASSWORD, :EMAIL, :FIRST_NAME, :LAST_NAME, :PHOTO_URL, :LAST_LOGIN, :SOURCE, :STATUS, :RESET_TOKEN, :CREATED_AT) ON CONFLICT (USERNAME) DO NOTHING; ",
      "postExecutionQueries": [
        "SELECT SETVAL('USERS_ID_SEQ', (SELECT MAX(ID) + 1 FROM USERS));"
      ]
    },
    {
      "selectQuery": "SELECT ID, NAME, INVITABLE, CREATED_AT FROM GROUPS; ",
      "insertQuery": "INSERT INTO GROUPS(ID, NAME, INVITABLE, CREATED_AT) VALUES (:ID, :NAME, :INVITABLE, :CREATED_AT) ON CONFLICT (NAME) DO NOTHING; ",
      "postExecutionQueries": [
        "SELECT SETVAL('GROUPS_ID_SEQ', (SELECT MAX(ID) + 1 FROM GROUPS));",
        "UPDATE GROUPS SET IS_DEFAULT = FALSE;",
        "UPDATE GROUPS SET IS_DEFAULT = TRUE WHERE NAME = 'Users';"
      ]
    },
    {
      "selectQuery": "SELECT ID, NAME, CREATED_AT FROM PERMISSIONS; ",
      "insertQuery": "INSERT INTO PERMISSIONS(ID, NAME, CREATED_AT) VALUES (:ID, :NAME, :CREATED_AT) ON CONFLICT (NAME) DO NOTHING; ",
      "postExecutionQueries": [
        "SELECT SETVAL('PERMISSIONS_ID_SEQ', (SELECT MAX(ID) + 1 FROM PERMISSIONS));"
      ]
    },
    {
      "selectQuery": "SELECT GROUP_ID, PERMISSION_ID, CREATED_AT FROM GROUP_PERMISSIONS; ",
      "insertQuery": "INSERT INTO GROUP_PERMISSIONS(GROUP_ID, PERMISSION_ID, CREATED_AT) VALUES (:GROUP_ID, :PERMISSION_ID, :CREATED_AT) ON CONFLICT (GROUP_ID, PERMISSION_ID) DO NOTHING; ",
      "postExecutionQueries": [
        "DO $$ DECLARE admins_group_id_var GROUPS.ID%TYPE; super_admins_group_id_var GROUPS.ID%TYPE; modify_widgets_permission_var PERMISSIONS.ID%TYPE; modify_users_permission_var PERMISSIONS.ID%TYPE; update_settings_permission_var PERMISSIONS.ID%TYPE; BEGIN admins_group_id_var :=(SELECT ID FROM GROUPS WHERE NAME = 'Admins'); super_admins_group_id_var := (SELECT ID FROM GROUPS WHERE NAME = 'Super admins'); modify_widgets_permission_var := (SELECT ID FROM PERMISSIONS WHERE NAME = 'MODIFY_WIDGETS'); modify_users_permission_var := (SELECT ID FROM PERMISSIONS WHERE NAME = 'MODIFY_USERS'); IF EXISTS(SELECT CREATED_AT FROM GROUP_PERMISSIONS WHERE GROUP_ID = admins_group_id_var AND PERMISSION_ID = modify_widgets_permission_var) THEN INSERT INTO GROUP_PERMISSIONS (GROUP_ID, PERMISSION_ID) VALUES (admins_group_id_var, modify_users_permission_var) ON CONFLICT DO NOTHING; END IF; IF EXISTS(SELECT CREATED_AT FROM GROUP_PERMISSIONS WHERE GROUP_ID = super_admins_group_id_var AND PERMISSION_ID = modify_widgets_permission_var) THEN INSERT INTO GROUP_PERMISSIONS (GROUP_ID, PERMISSION_ID) VALUES (admins_group_id_var, modify_users_permission_var) ON CONFLICT DO NOTHING; END IF; INSERT INTO PERMISSIONS (NAME) VALUES ('UPDATE_SETTINGS') ON CONFLICT DO NOTHING RETURNING ID INTO update_settings_permission_var; IF update_settings_permission_var IS NOT NULL THEN INSERT INTO GROUP_PERMISSIONS (GROUP_ID, PERMISSION_ID) VALUES (admins_group_id_var, update_settings_permission_var) ON CONFLICT DO NOTHING; INSERT INTO GROUP_PERMISSIONS (GROUP_ID, PERMISSION_ID) VALUES (super_admins_group_id_var, update_settings_permission_var) ON CONFLICT DO NOTHING; END IF; END $$; "
      ]
    },
    {
      "selectQuery": "SELECT USER_ID, GROUP_ID, CREATED_AT FROM USER_GROUPS; ",
      "insertQuery": "INSERT INTO USER_GROUPS(USER_ID, GROUP_ID, CREATED_AT) VALUES (:USER_ID, :GROUP_ID, :CREATED_AT) ON CONFLICT (USER_ID, GROUP_ID) DO NOTHING; "
    },
    {
      "selectQuery": "SELECT ID, EMAIL, TOKEN, USER_ID AS INVITOR_ID, GROUP_ID, SOURCE, CREATED_AT FROM INVITATIONS WHERE STATUS = 'PENDING'; ",
      "insertQuery": "INSERT INTO INVITATIONS(ID, EMAIL, TOKEN, INVITOR_ID, GROUP_ID, SOURCE, CREATED_AT) VALUES (:ID, :EMAIL, :TOKEN, :INVITOR_ID, :GROUP_ID, :SOURCE, :CREATED_AT) ON CONFLICT (EMAIL) DO NOTHING; ",
      "postExecutionQueries": [
        "SELECT SETVAL('INVITATIONS_ID_SEQ', (SELECT MAX(ID) + 1 FROM INVITATIONS));"
      ]
    },
    {
      "selectQuery": "SELECT ID, ENABLED,(SELECT IST.VALUE FROM INTEGRATION_PARAMS IP JOIN INTEGRATION_SETTINGS IST ON IP.ID = IST.INTEGRATION_PARAM_ID WHERE IP.NAME = 'LDAP_URL') AS URL, (SELECT IST.VALUE FROM INTEGRATION_PARAMS IP JOIN INTEGRATION_SETTINGS IST ON IP.ID = IST.INTEGRATION_PARAM_ID WHERE IP.NAME = 'LDAP_MANAGER_USER') AS MANAGER_USER, (SELECT IST.VALUE FROM INTEGRATION_PARAMS IP JOIN INTEGRATION_SETTINGS IST ON IP.ID = IST.INTEGRATION_PARAM_ID WHERE IP.NAME = 'LDAP_MANAGER_PASSWORD') AS MANAGER_PASSWORD, (SELECT IST.VALUE FROM INTEGRATION_PARAMS IP JOIN INTEGRATION_SETTINGS IST ON IP.ID = IST.INTEGRATION_PARAM_ID WHERE IP.NAME = 'LDAP_DN') AS DN, (SELECT IST.VALUE FROM INTEGRATION_PARAMS IP JOIN INTEGRATION_SETTINGS IST ON IP.ID = IST.INTEGRATION_PARAM_ID WHERE IP.NAME = 'LDAP_SEARCH_FILTER') AS SEARCH_FILTER, (SELECT VALUE FROM SETTINGS WHERE NAME = 'KEY') AS PASSWORD_KEY, CREATED_AT FROM INTEGRATIONS WHERE NAME = 'LDAP' AND (SELECT IST.VALUE FROM INTEGRATION_PARAMS IP JOIN INTEGRATION_SETTINGS IST ON IP.ID = IST.INTEGRATION_PARAM_ID WHERE IP.NAME = 'LDAP_URL') IS NOT NULL; ",
      "insertQuery": "INSERT INTO LDAP_CONFIGURATION(ID, ENABLED, URL, MANAGER_USER, MANAGER_PASSWORD, DN, SEARCH_FILTER, PASSWORD_KEY, CREATED_AT) VALUES (:ID, :ENABLED, :URL, :MANAGER_USER, :MANAGER_PASSWORD, :DN, :SEARCH_FILTER, :PASSWORD_KEY, :CREATED_AT) ON CONFLICT (ID) DO UPDATE SET ENABLED = :ENABLED, URL = :URL, MANAGER_USER = :MANAGER_USER, MANAGER_PASSWORD = :MANAGER_PASSWORD, DN = :DN, SEARCH_FILTER = :SEARCH_FILTER, PASSWORD_KEY = :PASSWORD_KEY, CREATED_AT = :CREATED_AT; ",
      "postExecutionQueries": [
        "SELECT SETVAL('LDAP_CONFIGURATION_ID_SEQ', (SELECT MAX(ID) + 1 FROM LDAP_CONFIGURATION));"
      ]
    }
  ]
}
